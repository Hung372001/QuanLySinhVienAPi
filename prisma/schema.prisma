generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Permission {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    Ma      String   @unique
    Name    String   @unique
    Account Account?
}

model Account {
    id                 String          @id @default(auto()) @map("_id") @db.ObjectId
    userName           String          @unique
    permission         Permission      @relation(fields: [permissionCode], references: [Ma])
    permissionCode     String          @unique
    hashedPassword     String          @unique
    email              String          @unique
    sex                String          @unique
    Date               String
    Address            String
    numberPhone        String          @unique
    firstName          String          @unique
    lastName           String          @unique
    avatar             String          @default("")
    Class              Class?          @relation(fields: [className], references: [name])
    className          String          @default("")
    SubjectTeacher     SubjectTeacher? @relation(fields: [subjectTeacherName], references: [name])
    subjectTeacherName String?         @default("")
    schedule           schedule?
    Score              Score[]         @relation(fields: [scoreId], references: [id])
    scoreId            String[]        @db.ObjectId
}

model Menu {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String @unique
    slug String @unique
}

model Class {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    name      String     @unique
    student   Account[]
    ListClass ListClass? @relation(fields: [Khoi], references: [name])
    Khoi      String     @unique
}

model ListClass {
    id    String  @id @default(auto()) @map("_id") @db.ObjectId
    name  String  @unique
    class Class[]
}

model SubjectTeacher {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    name     String    @unique
    teachers Account[]
}

model Subject {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String @unique
    time String @unique

    Day     Day?     @relation(fields: [dayId], references: [id])
    dayId   String?  @db.ObjectId
    Score   Score[]  @relation(fields: [scoreId], references: [id])
    scoreId String[] @db.ObjectId
}

model Day {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    subjectInDatet Subject[]
    schedule       schedule? @relation(fields: [scheduleId], references: [id])
    scheduleId     String?   @db.ObjectId
}

model schedule {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String   @unique
    scheduleDay Day[]
    account     Account? @relation(fields: [accountId], references: [id])
    accountId   String?  @unique @db.ObjectId
}

model Score {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    Score15m  String    @default("")
    Score45m  String    @default("")
    Score60m  String    @default("")
    semester  String    @default("")
    accountId String[]  @db.ObjectId
    Account   Account[] @relation(fields: [accountId], references: [id])
    subjectId String[]  @db.ObjectId
    Subject   Subject[] @relation(fields: [subjectId], references: [id])
}
